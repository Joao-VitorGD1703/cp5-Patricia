package arvores;

import java.util.ArrayList;
import java.util.List;

import cliente.Cliente;

public class Arvores {

	private class ARVORE {
		Cliente cliente;
		ARVORE esq, dir;
	}

	    public ARVORE root = null;
	
	    public ARVORE rootFisica = null; // Árvore para pessoas físicas
	    public ARVORE rootJuridica = null; // Árvore para pessoas jurídicas

	public ARVORE inserirPessoaFisica(ARVORE p, Cliente cliente) {
		
			if (p == null) {
				p = new ARVORE();
				p.cliente = cliente;
				p.esq = null;
				p.dir = null;
			} else if (cliente.getSaldo() < p.cliente.getSaldo())
				p.esq = inserirPessoaFisica(p.esq, cliente);
			else
				p.dir = inserirPessoaFisica(p.dir, cliente);
			return p;	
		
	}

	public ARVORE inserirPessoaJuridica(ARVORE p, Cliente cliente) {
		
			if (p == null) {
				p = new ARVORE();
				p.cliente = cliente;
				p.esq = null;
				p.dir = null;
			} else if (cliente.getSaldo() < p.cliente.getSaldo())
				p.esq = inserirPessoaJuridica(p.esq, cliente);
			else
				p.dir = inserirPessoaJuridica(p.dir, cliente);
			return p;	
		
	}
	
	
	
	
	
	
	
	

	public boolean consulta(ARVORE p, double saldo) {
		if (p == null)
			return false;
		else {
			if (saldo == p.cliente.getSaldo())
				return true;
			else {
				if (saldo > p.cliente.getSaldo())
					return consulta(p.esq, saldo);
				else
					return consulta(p.dir, saldo);
			}
		}
	}
	
	
	// Método para consultar uma pessoa física
	public boolean consultaPessoaFisica(double saldo) {
	    return consulta(rootFisica, saldo);
	}

	// Método para consultar uma pessoa jurídica
	public boolean consultaPessoaJuridica(double saldo) {
	    return consulta(rootJuridica, saldo);
	}
	
	
	
	
	
	
	
	public Cliente buscarClientePorCpfCnpj(ARVORE p, String cpfCnpj) {
	    if (p == null) {
	        return null; // Cliente não encontrado na árvore
	    }
	    
	    // Comparar o CPF/CNPJ do cliente com o valor de busca
	    int comparacao = cpfCnpj.compareTo(p.cliente.getDocumentoCpfCnpj());
	    
	    if (comparacao == 0) {
	        // Encontrou o cliente com o CPF/CNPJ desejado
	        return p.cliente;
	    } else if (comparacao < 0) {
	        // O CPF/CNPJ desejado é menor, continue a busca na subárvore esquerda
	        return buscarClientePorCpfCnpj(p.esq, cpfCnpj);
	    } else {
	        // O CPF/CNPJ desejado é maior, continue a busca na subárvore direita
	        return buscarClientePorCpfCnpj(p.dir, cpfCnpj);
	    }
	}

	public Cliente buscarClientePorCpf(ARVORE p, String cpfCnpj) {
	    return buscarClientePorCpfCnpj(rootFisica, cpfCnpj); // Substitua por rootJuridica, se necessário
	}
	
	public Cliente buscarClientePorCnpj(ARVORE p, String cpfCnpj) {
	    return buscarClientePorCpfCnpj(rootJuridica, cpfCnpj); // Substitua por rootJuridica, se necessário
	}

	
	
	
	
	
	
	

	public int contaConsulta(ARVORE p, double saldo, int cont) {
	    if (p != null) {
	        if (saldo == p.cliente.getSaldo()) {
	            cont++;
	        }

	        if (saldo <= p.cliente.getSaldo()) {
	            cont = contaConsulta(p.esq, saldo, cont);
	        }
	        
	        cont = contaConsulta(p.dir, saldo, cont);
	    }
	    
	    return cont;
	}
	
	// Método para contar a quantidade de clientes com um saldo específico em pessoas físicas
	public int contaClientesPessoaFisicaComSaldo(double saldo) {
	    return contaConsulta(rootFisica, saldo, 0);
	}

	// Método para contar a quantidade de clientes com um saldo específico em pessoas jurídicas
	public int contaClientesPessoaJuridicaComSaldo(double saldo) {
	    return contaConsulta(rootJuridica, saldo, 0);
	}
	
	
	
	
	
	 public List<Cliente> gerarListaOferta(double saldoMinimo, String tipoCliente) {
	        List<Cliente> listaClientesAptos = new ArrayList<>();
	        if (tipoCliente.equals("Física")) {
	            percorrerABB(rootFisica, saldoMinimo, listaClientesAptos);
	        } else if (tipoCliente.equals("Jurídica")) {
	            percorrerABB(rootJuridica, saldoMinimo, listaClientesAptos);
	        }
	        return listaClientesAptos;
	    }

	    private void percorrerABB(ARVORE p, double saldoMinimo, List<Cliente> listaClientesAptos) {
	        if (p != null) {
	            // Percorra a árvore em ordem decrescente (do maior saldo para o menor)
	            percorrerABB(p.dir, saldoMinimo, listaClientesAptos);

	            // Verifique se o cliente atende aos critérios
	            if (p.cliente.getSaldo() >= saldoMinimo) {
	                listaClientesAptos.add(p.cliente);
	            }

	            percorrerABB(p.esq, saldoMinimo, listaClientesAptos);
	        }
	    }
	
	
	
	
	
	
	
	

	public ARVORE removeValor(ARVORE p, double saldo) {
		if (p != null) {
			if (saldo == p.cliente.getSaldo()) {
				if (p.esq == null && p.dir == null) // nó a ser removido é nó folha
					return null;
				if (p.esq == null) {
					return p.dir;
				} else {
					if (p.dir == null) {
						return p.esq;
					} else {
						ARVORE aux, ref;
						ref = p.dir;
						aux = p.dir;
						while (aux.esq != null)
							aux = aux.esq;
						aux.esq = p.esq;
						return ref;
					}
				}
			} else {
				if (saldo < p.cliente.getSaldo())
					p.esq = removeValor(p.esq, saldo);
				else
					p.dir = removeValor(p.dir, saldo);
			}
		}
		return p;
	}

	public int contaNos(ARVORE p, int cont) {
		if (p != null) {
			cont++;
			cont = contaNos(p.esq, cont);
			cont = contaNos(p.dir, cont);
		}
		return cont;
	}

	public void listaEmOrdem(ARVORE p) {
		if (p != null) {
			listaEmOrdem(p.esq);
			System.out.print(" " + p.cliente.getNome());
			listaEmOrdem(p.dir);
		}
	}
	
	public List<Cliente> gerarListaOferta(double saldoMinimo) {
	    List<Cliente> listaClientesAptos = new ArrayList<>();
	    gerarListaOferta(root, saldoMinimo, listaClientesAptos);
	    return listaClientesAptos;
	}

	private void gerarListaOferta(ARVORE p, double saldoMinimo, List<Cliente> listaClientesAptos) {
	    if (p != null) {
	        if (p.cliente.getSaldo() >= saldoMinimo) {
	            listaClientesAptos.add(p.cliente);
	        }
	        gerarListaOferta(p.esq, saldoMinimo, listaClientesAptos);
	        gerarListaOferta(p.dir, saldoMinimo, listaClientesAptos);
	    }
	}
	
	
	
	public void esvaziarABB(ARVORE p) {
	    if (p != null) {
	        esvaziarABB(p.esq);  // Percorre a subárvore esquerda
	        esvaziarABB(p.dir);  // Percorre a subárvore direita
	        p.cliente = null;   // Remove a referência ao cliente
	    }
	}

	
	
	
	

	
	



}
